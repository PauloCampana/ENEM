# Processamento de dados

```{r}
#| warning: false
library(tidyverse)
```

```{r}
microdados <- "dados/microdados.csv" |>
    vroom::vroom(
        locale = locale(encoding = "ISO-8859-1"),
        show_col_types = FALSE
    ) |> 
    select(
        inscrição      = NU_INSCRICAO,
        região         = CO_MUNICIPIO_PROVA, 
        estado         = SG_UF_PROVA, 
        município      = NO_MUNICIPIO_PROVA,
        idade          = TP_FAIXA_ETARIA,
        sexo           = TP_SEXO, 
        estado_civil   = TP_ESTADO_CIVIL,
        cor            = TP_COR_RACA,
        nacionalidade  = TP_NACIONALIDADE,
        situação_médio = TP_ST_CONCLUSAO,
        renda          = Q006, 
        internet       = Q025,
        MT             = NU_NOTA_MT, 
        CN             = NU_NOTA_CN, 
        CH             = NU_NOTA_CH, 
        LC             = NU_NOTA_LC,
        R              = NU_NOTA_REDACAO, 
        R1             = NU_NOTA_COMP1,
        R2             = NU_NOTA_COMP2,
        R3             = NU_NOTA_COMP3, 
        R4             = NU_NOTA_COMP4, 
        R5             = NU_NOTA_COMP5
    ) |> 
    filter(if_all(
        MT:R, function(x) !is.na(x)
    )) |> 
    mutate(
        região = (região %/% 1e6) |> case_match(
            1 ~ "Norte",
            2 ~ "Nordeste",
            3 ~ "Sudeste",
            4 ~ "Sul",
            5 ~ "Centro-Oeste"
        ) |> as.factor(),
        estado = estado |> case_match(
            "AC" ~ "Acre",   
            "AP" ~ "Amapá",
            "AM" ~ "Amazonas",
            "PA" ~ "Pará",
            "RO" ~ "Rondônia",
            "RR" ~ "Roraima",
            "TO" ~ "Tocantins",
            "AL" ~ "Alagoas", 
            "BA" ~ "Bahia",
            "CE" ~ "Ceará",
            "MA" ~ "Maranhão",
            "PB" ~ "Paraíba", 
            "PE" ~ "Pernambuco",
            "PI" ~ "Piauí",     
            "RN" ~ "Rio Grande do Norte",
            "SE" ~ "Sergipe",
            "ES" ~ "Espírito Santo",  
            "MG" ~ "Minas Gerais",
            "RJ" ~ "Rio de Janeiro",
            "SP" ~ "São Paulo",
            "PR" ~ "Paraná",         
            "SC" ~ "Santa Catarina",
            "RS" ~ "Rio Grande do Sul",
            "DF" ~ "Distrito Federal", 
            "GO" ~ "Goiás",
            "MT" ~ "Mato Grosso",     
            "MS" ~ "Mato Grosso do Sul",
        ) |> as.factor(),
        idade = idade |> case_match(
            1  ~ "0-17", 
            2  ~ "17",
            3  ~ "18",  
            4  ~ "19",
            5  ~ "20",  
            6  ~ "21",   
            7  ~ "22",  
            8  ~ "23",
            9  ~ "24",  
            10 ~ "25", 
            11 ~ "26-30", 
            12 ~ "31-35",
            13 ~ "36-40", 
            14 ~ "41-45", 
            15 ~ "46-50", 
            16 ~ "51-55",
            17 ~ "56-60",
            18 ~ "61-65", 
            19 ~ "66-70", 
            20 ~ "70+",
        ) |> as.ordered(),
        sexo = sexo |> case_match(
            "M" ~ "Masculino", 
            "F" ~ "Feminino"
        ) |> as.factor(),
        estado_civil = estado_civil |> case_match(
            0 ~ NA,
            1 ~ "Solteiro",
            2 ~ "Casado",
            3 ~ "Divorciado",
            4 ~ "Viúvo"
        ) |> as.factor(),
        cor = cor |> case_match(
            0 ~ NA, 
            1 ~ "Branca",
            2 ~ "Preta",
            3 ~ "Parda",
            4 ~ "Amarela",
            5 ~ "Indígena",
            6 ~ NA
        ) |> as.factor(),
        nacionalidade = nacionalidade |> case_match(
            0 ~ NA,
            1 ~ "Brasileiro",
            2 ~ "Brasileiro naturalizado",
            3 ~ "Estrangeiro",
            4 ~ "Brasileiro nascido no exterior" 
        ) |> as.factor(),
        situação_médio = situação_médio |> case_match(
            1 ~ "Concluído", 
            2 ~ "Será concluído em 2021",
            3 ~ "Será concluído após 2021",  
            4 ~ "Não concluíu"
        ) |> as.factor(),
        renda = renda |> case_match(
            "A" ~ "0",           
            "B" ~ "0-1100",     
            "C" ~ "1100-1650",
            "D" ~ "1650-2200",   
            "E" ~ "2200-2750",   
            "F" ~ "2750-3300",
            "G" ~ "3300-4400",  
            "H" ~ "4400-5500", 
            "I" ~ "5500-6600",
            "J" ~ "6600-7700",   
            "K" ~ "7700-8800",   
            "L" ~ "8800-9900",
            "M" ~ "9900-11000",  
            "N" ~ "11000-13200", 
            "O" ~ "13200-16500",
            "P" ~ "16500-22000",
            "Q" ~ "22000+"
        ) |> as.ordered(),
        internet = internet |> case_match(
            "A" ~ "Não",
            "B" ~ "Sim" 
        ) |> as.factor()
    )
```

```{r}
microdados |>  
    arrow::write_dataset(
        path = "dados",
        format = "parquet",
        basename_template = "microdados{i}.parquet"
    )
```